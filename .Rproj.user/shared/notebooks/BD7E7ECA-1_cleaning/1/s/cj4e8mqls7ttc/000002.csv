"0",""
"0","## Generates data from WGM"
"0",""
"0","wgmdata <- readr::read_csv(""2_input_data/wgm_2018_publiccsv.csv"")"
"2","Parsed with column specification:
cols(
  .default = col_double(),
  FIELD_DATE = [31mcol_character()[39m
)
"
"2","See spec(...) for full column specifications.
"
"0","# recode the name of countries"
"0","ctries <- list(""1"" = ""USA"", ""9"" = ""Pakistan"","
"0","               ""31"" = ""India"", ""35"" = ""Nigeria"","
"0","               ""41"" = ""Uganda"", ""63"" = ""Mozambique"","
"0","               ""65"" = ""Rwanda"", ""76"" = ""Russia"","
"0","               ""78"" = ""Burkina Faso"", ""80"" = ""Sierra Leone"","
"0","               ""105"" = ""Colombia"", ""157"" = ""Nepal"")"
"0",""
"0","wgmdata %<>%"
"0","  # keep only these countries we have data for"
"0","  dplyr::filter(WP5 %in% c(1,9,31,35,41,63,65,76,78,80,105,157)) %>% "
"0","  dplyr::mutate("
"0","    country = purrr::map_chr(WP5, ~ ctries[[as.character(.x)]]),"
"0","    # turn the variables into binary versions"
"0","    importance_binary = 2 - cut(Q24,  breaks = c(-Inf, 2, 6), labels = FALSE),"
"0","    safe_binary       = 2 - cut(Q25,  breaks = c(-Inf, 2, 6), labels = FALSE),"
"0","    effective_binary  = 2 - cut(Q26,  breaks = c(-Inf, 2, 6), labels = FALSE),"
"0","    cov_binary        = 2 - cut(Q28,  breaks = c(-Inf, 1, 3), labels = FALSE),"
"0","    t_neigh           = 2 - cut(Q11A, breaks = c(-Inf, 2, 4), labels = FALSE),"
"0","    t_gov             = 2 - cut(Q11B, breaks = c(-Inf, 2, 4), labels = FALSE),"
"0","    t_scient          = 2 - cut(Q11C, breaks = c(-Inf, 2, 4), labels = FALSE),"
"0","    t_jour            = 2 - cut(Q11D, breaks = c(-Inf, 2, 4), labels = FALSE),"
"0","    t_doc             = 2 - cut(Q11E, breaks = c(-Inf, 2, 4), labels = FALSE),"
"0","    t_ngo             = 2 - cut(Q11F, breaks = c(-Inf, 2, 4), labels = FALSE),"
"0","    t_theal           = 2 - cut(Q11G, breaks = c(-Inf, 2, 4), labels = FALSE),"
"0","    "
"0","  )"
"0",""
"0","#compute rates"
"0","wgm_results <- "
"0","  wgmdata %>%"
"0","  dplyr::nest_by(country) %>%"
"0","  dplyr::mutate("
"0","    modelimp = list(lm_robust(importance_binary ~ 1, "
"0","                              weight = wgt,"
"0","                              data = data, se_type = ""stata"")),"
"0","    modelsaf = list(lm_robust(safe_binary ~ 1, "
"0","                              weight = wgt,"
"0","                              data = data, se_type = ""stata"")),"
"0","    modeleff = list(lm_robust(effective_binary ~ 1, "
"0","                              weight = wgt,"
"0","                              data = data, se_type = ""stata"")),"
"0","    modelcov = list(lm_robust(cov_binary ~ 1, "
"0","                              weight = wgt,"
"0","                              data = data, se_type = ""stata"")),"
"0","    modelneigh = list(lm_robust(t_neigh ~ 1, "
"0","                                weight = wgt,"
"0","                                data = data, se_type = ""stata"")),"
"0","    modelgov = list(lm_robust(t_gov ~ 1, "
"0","                              weight = wgt,"
"0","                              data = data, se_type = ""stata"")),"
"0","    modelscient = list(lm_robust(t_scient ~ 1, "
"0","                                 weight = wgt,"
"0","                                 data = data, se_type = ""stata"")),"
"0","    modeljour = list(lm_robust(t_jour ~ 1, "
"0","                               weight = wgt,"
"0","                               data = data, se_type = ""stata"")),"
"0","    modeldoc = list(lm_robust(t_doc ~ 1, "
"0","                              weight = wgt,"
"0","                              data = data, se_type = ""stata"")),"
"0","    modelngo = list(lm_robust(t_ngo ~ 1, "
"0","                              weight = wgt,"
"0","                              data = data, se_type = ""stata"")),"
"0","    modeltheal = list(lm_robust(t_theal ~ 1, "
"0","                                weight = wgt,"
"0","                                data = data, se_type = ""stata"")))"
"0",""
"0","#complete table"
"0","table_wgm <- "
"0","  wgm_results %>%"
"0","  summarize(tidy(modelimp)) %>%"
"0","  mutate(estimate = "
"0","           paste0(round(estimate*100, 0))"
"0","  ) %>%"
"0","  select(estimate) %>% "
"0","  rename(Important = estimate)"
"2","`summarise()` has grouped output by 'country'. You can override using the `.groups` argument.
"
"2","Adding missing grouping variables: `country`
"
"0","table_wgm <- "
"0","  wgm_results %>%"
"0","  summarize(tidy(modelsaf)) %>%"
"0","  mutate(estimate = "
"0","           paste0(round(estimate*100, 0))"
"0","  ) %>%"
"0","  select(estimate) %>% "
"0","  rename(Safety = estimate) %>%"
"0","  left_join(table_wgm)"
"2","`summarise()` has grouped output by 'country'. You can override using the `.groups` argument.
"
"2","Adding missing grouping variables: `country`
"
"2","Joining, by = ""country""
"
"0","table_wgm <- "
"0","  wgm_results %>%"
"0","  summarize(tidy(modeleff)) %>%"
"0","  mutate(estimate = "
"0","           paste0(round(estimate*100, 0))"
"0","  ) %>%"
"0","  select(estimate) %>% "
"0","  rename(Effectiveness = estimate) %>%"
"0","  left_join(table_wgm)"
"2","`summarise()` has grouped output by 'country'. You can override using the `.groups` argument.
"
"2","Adding missing grouping variables: `country`
"
"2","Joining, by = ""country""
"
"0","table_wgm <- "
"0","  wgm_results %>%"
"0","  summarize(tidy(modelcov)) %>%"
"0","  mutate(estimate = "
"0","           paste0(round(estimate*100, 0))"
"0","  ) %>%"
"0","  select(estimate) %>% "
"0","  rename(Coverage = estimate) %>%"
"0","  left_join(table_wgm)"
"2","`summarise()` has grouped output by 'country'. You can override using the `.groups` argument.
"
"2","Adding missing grouping variables: `country`
"
"2","Joining, by = ""country""
"
"0","readr::write_csv(table_wgm, ""3_rep_data/table_wgm.csv"")"
